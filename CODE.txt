#include <QTRSensors.h>
#include <SparkFun_TB6612.h>

#define AIN1 5
#define BIN1 7
#define AIN2 4
#define BIN2 8
#define PWMA 3
#define PWMB 9
#define STBY 6

const int offsetA = 1;
const int offsetB = 1;

Motor motor1 = Motor(AIN1, AIN2, PWMA, offsetA, STBY);
Motor motor2 = Motor(BIN1, BIN2, PWMB, offsetB, STBY);

QTRSensors qtr;

const uint8_t SensorCount = 8;
uint16_t sensorValues[SensorCount];

int max_speed = 220;  // Reduced from 255 for better control
int turn_speed = 140; // Adjusted for smoother turns
int min_speed = 50;   // Prevents stalling

int L = 0, R = 0;
int error = 0, adj = 0;

float Kp = 0.078;  // Increased for sharper response
float Ki = 0.006;  // Lowered to avoid excessive accumulation
float Kd = 1.5;    // Increased to reduce oscillations

int P, I, D;
int lastError = 0;
uint16_t position;

// Stop Detection Variables
unsigned long blackStartTime = 0;
const unsigned long blackThreshold = 1500; // Stop after 1.5s on black

void setup() {
    Serial.begin(9600);

    brake();
    pinMode(STBY, OUTPUT);
    digitalWrite(STBY, HIGH);  // Ensure motors are active

    qtr.setTypeAnalog();
    qtr.setSensorPins((const uint8_t[]){ A0, A1, A2, A3, A4, A5, A6, A7 }, SensorCount);
    qtr.setEmitterPin(2);

    Serial.println("Calibrating...");
    for (uint16_t i = 0; i < 150; i++) {  // Reduced calibration time
        qtr.calibrate();
        delay(10);
    }

    Serial.println("Done");
}

void loop() {
    PID_control();
}

// PID CONTROL FUNCTION
void PID_control() {
    position = qtr.readLineWhite(sensorValues);
    Serial.print("QTR Position: ");
    Serial.println(position);

    error = 3500 - position;

    // Black Line (Finish Line) Detection
    bool allBlack = true;
    for (int i = 0; i < SensorCount; i++) {
        if (sensorValues[i] < 900) {  // Adjust threshold if needed
            allBlack = false;
            break;
        }
    }

    if (allBlack) {
        if (blackStartTime == 0) {
            blackStartTime = millis();
        } else if (millis() - blackStartTime >= blackThreshold) {
            brake();
            Serial.println("🏁 Robot Stopped at Finish Line!");
            while (true) delay(1000); // Prevents further execution
        }
    } else {
        blackStartTime = 0;  // Reset timer if not on finish line
    }

    // Turning Adjustments
    if (error > 2000) {  
        L = turn_speed;
        R = min_speed;  // Reduce speed for sharp left
    } else if (error < -2000) {  
        L = min_speed;  
        R = turn_speed;  // Reduce speed for sharp right
    } else {  // Normal PID control
        P = error;
        I += error;
        I = constrain(I, -300, 300);  // Integral windup protection
        D = error - lastError;
        lastError = error;

        adj = P * Kp + I * Ki + D * Kd;

        L = max_speed + adj;
        R = max_speed - adj;

        L = constrain(L, min_speed, max_speed);
        R = constrain(R, min_speed, max_speed);
    }

    forward(L, R);
}

// ROBOT MOVEMENT FUNCTIONS
void forward(int L, int R) {
    digitalWrite(STBY, HIGH);
    motor1.drive(L);
    motor2.drive(R);
}

void sharp_right() {
    digitalWrite(STBY, HIGH);
    motor1.drive(-turn_speed);
    motor2.drive(turn_speed);
}

void sharp_left() {
    digitalWrite(STBY, HIGH);
    motor1.drive(turn_speed);
    motor2.drive(-turn_speed);
}

void brake() {
    motor1.drive(0);
    motor2.drive(0);
}
